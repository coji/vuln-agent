import type { AnalysisResult, Vulnerability } from './types.js'

// Console Reporter
export const createConsoleReporter = () => {
  const severityColors = {
    critical: '\x1b[31m', // red
    high: '\x1b[33m', // yellow
    medium: '\x1b[36m', // cyan
    low: '\x1b[34m', // blue
    info: '\x1b[90m', // gray
  }

  const reset = '\x1b[0m'

  const formatVulnerability = (vuln: Vulnerability): string => {
    const color = severityColors[vuln.severity]
    return `${color}[${vuln.severity.toUpperCase()}]${reset} ${vuln.file}:${vuln.line}:${vuln.column}
  ${vuln.message}
  Rule: ${vuln.rule}
  Code: ${vuln.code}`
  }

  const generate = (result: AnalysisResult): string => {
    if (result.vulnerabilities.length === 0) {
      return `✅ No vulnerabilities found in ${result.scannedFiles} files (${result.duration}ms)`
    }

    const output: string[] = [
      `\n🔍 Vulnerability Scan Results`,
      `━━━━━━━━━━━━━━━━━━━━━━━━━━━━`,
      `Scanned ${result.scannedFiles} files in ${result.duration}ms`,
      `Found ${result.vulnerabilities.length} vulnerabilities\n`,
    ]

    const grouped = result.vulnerabilities.reduce(
      (acc, vuln) => {
        if (!acc[vuln.severity]) acc[vuln.severity] = []
        acc[vuln.severity].push(vuln)
        return acc
      },
      {} as Record<string, Vulnerability[]>,
    )

    const severityOrder = ['critical', 'high', 'medium', 'low', 'info']

    for (const severity of severityOrder) {
      const vulns = grouped[severity]
      if (vulns && vulns.length > 0) {
        output.push(
          `\n${severityColors[severity as keyof typeof severityColors]}${severity.toUpperCase()}${reset} (${vulns.length})`,
        )
        output.push('─'.repeat(40))
        vulns.forEach((vuln) => {
          output.push(formatVulnerability(vuln))
          output.push('')
        })
      }
    }

    return output.join('\n')
  }

  return { generate }
}

// JSON Reporter
export const createJsonReporter = () => {
  const generate = (result: AnalysisResult): string => {
    return JSON.stringify(result, null, 2)
  }

  return { generate }
}

// Markdown Reporter
export const createMarkdownReporter = () => {
  const formatVulnerability = (vuln: Vulnerability, index: number): string => {
    const severityEmoji = {
      critical: '🔴',
      high: '🟠',
      medium: '🟡',
      low: '🔵',
      info: '⚪',
    }

    return `### ${index + 1}. ${severityEmoji[vuln.severity]} ${vuln.type}

**Severity:** ${vuln.severity.toUpperCase()}  
**File:** \`${vuln.file}\`  
**Location:** Line ${vuln.line}, Column ${vuln.column}  
**Rule:** ${vuln.rule}

**Description:**
${vuln.message}

**Code:**
\`\`\`javascript
${vuln.code}
\`\`\`
`
  }

  const generate = (result: AnalysisResult): string => {
    const output: string[] = [
      '# Vulnerability Scan Report',
      '',
      `**Date:** ${new Date().toISOString()}  `,
      `**Files Scanned:** ${result.scannedFiles}  `,
      `**Scan Duration:** ${result.duration}ms  `,
      `**Vulnerabilities Found:** ${result.vulnerabilities.length}`,
      '',
    ]

    if (result.vulnerabilities.length === 0) {
      output.push('## ✅ No vulnerabilities found')
      output.push('')
      output.push(
        'The scan completed successfully without finding any security issues.',
      )
    } else {
      // Summary by severity
      const severityCounts = result.vulnerabilities.reduce(
        (acc, vuln) => {
          acc[vuln.severity] = (acc[vuln.severity] || 0) + 1
          return acc
        },
        {} as Record<string, number>,
      )

      output.push('## Summary')
      output.push('')
      output.push('| Severity | Count |')
      output.push('|----------|-------|')

      const severityOrder = ['critical', 'high', 'medium', 'low', 'info']
      for (const severity of severityOrder) {
        if (severityCounts[severity]) {
          output.push(
            `| ${severity.toUpperCase()} | ${severityCounts[severity]} |`,
          )
        }
      }

      output.push('')
      output.push('## Detailed Findings')
      output.push('')

      // Group by severity
      const grouped = result.vulnerabilities.reduce(
        (acc, vuln) => {
          if (!acc[vuln.severity]) acc[vuln.severity] = []
          acc[vuln.severity].push(vuln)
          return acc
        },
        {} as Record<string, Vulnerability[]>,
      )

      let vulnIndex = 0
      for (const severity of severityOrder) {
        const vulns = grouped[severity]
        if (vulns && vulns.length > 0) {
          output.push(`## ${severity.toUpperCase()} Severity Issues`)
          output.push('')

          vulns.forEach((vuln) => {
            output.push(formatVulnerability(vuln, vulnIndex++))
            output.push('---')
            output.push('')
          })
        }
      }
    }

    output.push('## Report Generated By')
    output.push('')
    output.push('**vuln-agent** - LLM-powered vulnerability scanner')
    output.push('')

    return output.join('\n')
  }

  return { generate }
}
