import type {
  AnalysisResult,
  Vulnerability,
  VulnerabilityFinding,
} from './types.js'
import { sanitizeHtml } from './utils.js'

// Console Reporter
export const createConsoleReporter = () => {
  const severityColors = {
    critical: '\x1b[31m', // red
    high: '\x1b[33m', // yellow
    medium: '\x1b[36m', // cyan
    low: '\x1b[34m', // blue
    info: '\x1b[90m', // gray
  }

  const reset = '\x1b[0m'

  const formatVulnerability = (vuln: Vulnerability): string => {
    const color = severityColors[vuln.severity]
    return `${color}[${vuln.severity.toUpperCase()}]${reset} ${vuln.file}:${vuln.line}:${vuln.column}
  ${vuln.message}
  Rule: ${vuln.rule}
  Code: ${vuln.code}`
  }

  const generate = (result: AnalysisResult): string => {
    if (result.vulnerabilities.length === 0) {
      return `✅ No vulnerabilities found in ${result.scannedFiles} files (${result.duration}ms)`
    }

    const output: string[] = [
      `\n🔍 Vulnerability Scan Results`,
      `━━━━━━━━━━━━━━━━━━━━━━━━━━━━`,
      `Scanned ${result.scannedFiles} files in ${result.duration}ms`,
      `Found ${result.vulnerabilities.length} vulnerabilities\n`,
    ]

    const grouped = result.vulnerabilities.reduce(
      (acc, vuln) => {
        if (!acc[vuln.severity]) acc[vuln.severity] = []
        acc[vuln.severity].push(vuln)
        return acc
      },
      {} as Record<string, Vulnerability[]>,
    )

    const severityOrder = ['critical', 'high', 'medium', 'low', 'info']

    for (const severity of severityOrder) {
      const vulns = grouped[severity]
      if (vulns && vulns.length > 0) {
        output.push(
          `\n${severityColors[severity as keyof typeof severityColors]}${severity.toUpperCase()}${reset} (${vulns.length})`,
        )
        output.push('─'.repeat(40))
        vulns.forEach((vuln) => {
          output.push(formatVulnerability(vuln))
          output.push('')
        })
      }
    }

    return output.join('\n')
  }

  return { generate }
}

// JSON Reporter
export const createJsonReporter = () => {
  const generate = (result: AnalysisResult): string => {
    return JSON.stringify(result, null, 2)
  }

  return { generate }
}

// Markdown Reporter
export const createMarkdownReporter = () => {
  const formatVulnerability = (vuln: Vulnerability, index: number): string => {
    const severityEmoji = {
      critical: '🔴',
      high: '🟠',
      medium: '🟡',
      low: '🔵',
      info: '⚪',
    }

    return `### ${index + 1}. ${severityEmoji[vuln.severity]} ${vuln.type}

**Severity:** ${vuln.severity.toUpperCase()}  
**File:** \`${vuln.file}\`  
**Location:** Line ${vuln.line}, Column ${vuln.column}  
**Rule:** ${vuln.rule}

**Description:**
${vuln.message}

**Code:**
\`\`\`javascript
${vuln.code}
\`\`\`
`
  }

  const generate = (result: AnalysisResult): string => {
    const output: string[] = [
      '# Vulnerability Scan Report',
      '',
      `**Date:** ${new Date().toISOString()}  `,
      `**Files Scanned:** ${result.scannedFiles}  `,
      `**Scan Duration:** ${result.duration}ms  `,
      `**Vulnerabilities Found:** ${result.vulnerabilities.length}`,
      '',
    ]

    if (result.vulnerabilities.length === 0) {
      output.push('## ✅ No vulnerabilities found')
      output.push('')
      output.push(
        'The scan completed successfully without finding any security issues.',
      )
    } else {
      // Summary by severity
      const severityCounts = result.vulnerabilities.reduce(
        (acc, vuln) => {
          acc[vuln.severity] = (acc[vuln.severity] || 0) + 1
          return acc
        },
        {} as Record<string, number>,
      )

      output.push('## Summary')
      output.push('')
      output.push('| Severity | Count |')
      output.push('|----------|-------|')

      const severityOrder = ['critical', 'high', 'medium', 'low', 'info']
      for (const severity of severityOrder) {
        if (severityCounts[severity]) {
          output.push(
            `| ${severity.toUpperCase()} | ${severityCounts[severity]} |`,
          )
        }
      }

      output.push('')
      output.push('## Detailed Findings')
      output.push('')

      // Group by severity
      const grouped = result.vulnerabilities.reduce(
        (acc, vuln) => {
          if (!acc[vuln.severity]) acc[vuln.severity] = []
          acc[vuln.severity].push(vuln)
          return acc
        },
        {} as Record<string, Vulnerability[]>,
      )

      let vulnIndex = 0
      for (const severity of severityOrder) {
        const vulns = grouped[severity]
        if (vulns && vulns.length > 0) {
          output.push(`## ${severity.toUpperCase()} Severity Issues`)
          output.push('')

          vulns.forEach((vuln) => {
            output.push(formatVulnerability(vuln, vulnIndex++))
            output.push('---')
            output.push('')
          })
        }
      }
    }

    output.push('## Report Generated By')
    output.push('')
    output.push('**vuln-agent** - LLM-powered vulnerability scanner')
    output.push('')

    return output.join('\n')
  }

  return { generate }
}

// Main reporter factory
export const createReporter = () => {
  const generateConsoleReport = (findings: VulnerabilityFinding[]): string => {
    const sortedFindings = [...findings].sort((a, b) => {
      const severityOrder: Record<string, number> = {
        critical: 0,
        high: 1,
        medium: 2,
        low: 3,
        info: 4,
      }
      return severityOrder[a.severity] - severityOrder[b.severity]
    })

    if (findings.length === 0) {
      return '✅ No vulnerabilities found'
    }

    const lines: string[] = [
      `Found ${findings.length} vulnerability${findings.length > 1 ? 'ies' : ''}`,
      '',
      '┌─────────────┬──────────┬────────────────────────────────────┐',
      '│ Severity    │ Type     │ Location                           │',
      '├─────────────┼──────────┼────────────────────────────────────┤',
    ]

    sortedFindings.forEach((finding) => {
      const severity = finding.severity.toUpperCase().padEnd(11)
      const type = finding.type.padEnd(8)
      const location = finding.url.substring(0, 34)
      lines.push(`│ ${severity} │ ${type} │ ${location} │`)
    })

    lines.push(
      '└─────────────┴──────────┴────────────────────────────────────┘',
    )

    return lines.join('\n')
  }

  const generateHTMLReport = (data: {
    findings: VulnerabilityFinding[]
    targetUrl: string
    duration: number
    stepsExecuted: number
  }): string => {
    const { findings, targetUrl, duration, stepsExecuted } = data

    const sortedFindings = [...findings].sort((a, b) => {
      const severityOrder: Record<string, number> = {
        critical: 0,
        high: 1,
        medium: 2,
        low: 3,
        info: 4,
      }
      return severityOrder[a.severity] - severityOrder[b.severity]
    })

    const severityColors: Record<string, string> = {
      critical: '#dc2626',
      high: '#ea580c',
      medium: '#f59e0b',
      low: '#3b82f6',
      info: '#6b7280',
    }

    return `<!DOCTYPE html>
<html>
<head>
  <title>VulnAgent Security Report</title>
  <style>
    body { font-family: system-ui; margin: 40px; background: #f9fafb; }
    h1 { color: #111827; }
    .summary { background: white; padding: 20px; border-radius: 8px; margin-bottom: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
    .finding { background: white; padding: 20px; border-radius: 8px; margin-bottom: 15px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); }
    .severity { padding: 4px 12px; border-radius: 4px; color: white; font-weight: 500; display: inline-block; }
    .evidence { background: #f3f4f6; padding: 12px; border-radius: 4px; margin: 10px 0; font-family: monospace; font-size: 14px; overflow-x: auto; }
    .meta { color: #6b7280; font-size: 14px; }
  </style>
</head>
<body>
  <h1>VulnAgent Security Report</h1>
  
  <div class="summary">
    <h2>Summary</h2>
    <p><strong>Target:</strong> ${sanitizeHtml(targetUrl)}</p>
    <p><strong>Duration:</strong> ${(duration / 1000).toFixed(2)}s</p>
    <p><strong>Steps Executed:</strong> ${stepsExecuted}</p>
    <p><strong>Vulnerabilities Found:</strong> ${findings.length}</p>
  </div>

  ${sortedFindings
    .map(
      (finding) => `
  <div class="finding">
    <span class="severity" style="background: ${severityColors[finding.severity]}">${finding.severity.toUpperCase()}</span>
    <h3>${sanitizeHtml(finding.type)}</h3>
    <p><strong>URL:</strong> ${sanitizeHtml(finding.url)}</p>
    ${finding.parameter ? `<p><strong>Parameter:</strong> ${sanitizeHtml(finding.parameter)}</p>` : ''}
    <p><strong>Confidence:</strong> ${(finding.confidence * 100).toFixed(0)}%</p>
    <p>${sanitizeHtml(finding.description)}</p>
    
    ${
      finding.evidence.payload
        ? `
    <h4>Payload</h4>
    <div class="evidence">${sanitizeHtml(finding.evidence.payload)}</div>
    `
        : ''
    }
    
    ${
      finding.evidence.response
        ? `
    <h4>Evidence</h4>
    <div class="evidence">
      Status: ${finding.evidence.response.status}<br>
      ${finding.evidence.response.body ? sanitizeHtml(finding.evidence.response.body.substring(0, 500)) + (finding.evidence.response.body.length > 500 ? '...' : '') : ''}
    </div>
    `
        : ''
    }
    
    <h4>Recommendation</h4>
    <p>${sanitizeHtml(finding.recommendation)}</p>
    
    <p class="meta">Found at: ${new Date(finding.timestamp).toLocaleString()}</p>
  </div>
  `,
    )
    .join('')}
  
  <p class="meta" style="text-align: center; margin-top: 40px;">
    Generated by VulnAgent at ${new Date().toLocaleString()}
  </p>
</body>
</html>`
  }

  return {
    generateConsoleReport,
    generateHTMLReport,
  }
}
